package com.mtool.toolslib.base.view.custom.webView

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.net.Uri
import android.net.http.SslError
import android.os.Build
import android.util.AttributeSet
import android.util.Log
import android.view.View
import android.webkit.CookieManager
import android.webkit.DownloadListener
import android.webkit.JsResult
import android.webkit.SslErrorHandler
import android.webkit.ValueCallback
import android.webkit.WebChromeClient
import android.webkit.WebResourceResponse
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.ProgressBar


import com.mtool.toolslib.base.R
import com.mtool.toolslib.base.core.ext.isNotNull

import java.util.HashMap

/**
 * Created by JayCruz on 2017/9/21.
 */

class webView : WebView {
    internal var context: Context
    private var pb: ProgressBar? = null
    private var errorPage: View? = null
    private var isPageError: Boolean = false
    /***
     * 取得当前progress
     * @return
     */
    var currentProgress: Int = 0
        private set
    var index: MutableMap<Int, Int> = HashMap()

    constructor(context: Context) : super(context) {
        setWebViewDefaults()
        this.context = context

    }

    constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {
        setWebViewDefaults()
        this.context = context

    }

    /***
     * 设定Activity ErrorPage
     * @param errorPage
     */
    fun setErrorPage(errorPage: View, isPageError: Boolean) {
        this.errorPage = errorPage
        this.isPageError = isPageError

    }

    /***
     * 设定Activity ProgressBar
     * @param progressBar
     */
    fun setProgressBar(progressBar: ProgressBar) {
        this.pb = progressBar

    }

    /***
     * 读取 新URL
     * @param url
     */
    override fun loadUrl(url: String) {
        super.loadUrl(url)
        index = HashMap()
        currentProgress = 0
    }

    /***
     * Activity完成时 清除所有记录
     */
    fun finish() {
        this.removeAllViews()
        this.tag = null
        this.clearHistory()
        this.destroy()
        index = HashMap()
        currentProgress = 0
    }

    /***
     * 当Activity回退 或 结束时呼叫
     */
    fun onBackPressed() {
        // By Jay 09-19 修改 回退 程序问题
        try {
            if (this.canGoBack()) {
                val currentIndex = this.copyBackForwardList().currentIndex
                if (currentIndex >= 1 && index[currentIndex] != null) {
                    /***
                     * 如果非第一层，直接回退到 第一层即可
                     */
                    this.goBackOrForward(-currentIndex)
                } else {
                    (context as Activity).finish()
                }
            } else {
                (context as Activity).finish()
            }
        } catch (ex: Exception) {
            (context as Activity).finish()
        }

    }


    @SuppressLint("SetJavaScriptEnabled")
    private fun setWebViewDefaults() {
        if (errorPage != null) {
            errorPage!!.visibility = if (isPageError) View.VISIBLE else View.GONE
        }

        this.requestFocusFromTouch()
        val settings = this.settings
        this.settings.cacheMode = WebSettings.LOAD_NO_CACHE
        settings.javaScriptEnabled = true
        settings.blockNetworkImage = false
        settings.useWideViewPort = true
        settings.loadWithOverviewMode = true
        settings.domStorageEnabled = true
        settings.databaseEnabled = true
        settings.allowFileAccess = true
        //缩放开关，仅仅支持双击缩放
        settings.setSupportZoom(true)
        //设置是否可缩放，会出现缩放工具
        settings.builtInZoomControls = true
        //隐藏缩放工具
        settings.displayZoomControls = false
        //WebView.setWebContentsDebuggingEnabled(true);
        this.webChromeClient = object : WebChromeClient() {
            override fun onProgressChanged(view: WebView, progress: Int) {
                pb!!.visibility = View.VISIBLE
                pb!!.progress = progress
                if (progress == 100)
                    pb!!.visibility = View.GONE
            }

            override fun onJsAlert(view: WebView, url: String, message: String,
                                   result: JsResult): Boolean {
                //加这段可以证webview中的alert弹出来
                return super.onJsAlert(view, url, message, result)
            }
        }

        this.setDownloadListener { url, userAgent, contentDisposition, mimetype, contentLength ->
            val uri = Uri.parse(url)
            val intent = Intent(Intent.ACTION_VIEW, uri)
            context.startActivity(intent)
        }
        val cookieManager = CookieManager.getInstance()
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            CookieManager.setAcceptFileSchemeCookies(true)
            cookieManager.setAcceptThirdPartyCookies(this, true)
        }
        this.webViewClient = setWebViewClient()
    }


    /**
     * onReceivedSslError
     * 如果不这样做 可能导致 中间网站进行用户资讯窃取
     */
    private fun setWebViewClient(): WebViewClient {
        return object : WebViewClient() {
            override fun shouldOverrideUrlLoading(wv: WebView, url: String?): Boolean {
                if (url == null) return false

                try {
                    if (url.startsWith("weixin://") //微信
                            || url.startsWith("alipays://") //支付宝

                            || url.startsWith("mailto://") //邮件

                            || url.startsWith("tel://")//电话

                            || url.startsWith("dianping://")//大众点评

                            || url.startsWith("mqqapi://")//QQ钱包
                            ) {
                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                        context.startActivity(intent)
                        Log.e("cww", "url1" + url)
                        return true
                    }//其他自定义的scheme
                } catch (e: Exception) { //防止crash (如果手机上没有安装处理某个scheme开头的url的APP, 会导致crash)
                    return true//没有安装该app时，返回true，表示拦截自定义链接，但不跳转，避免弹出上面的错误页面
                }

                return false
            }

            override fun onReceivedSslError(view: WebView, handler: SslErrorHandler, error: SslError) {
            }

            override fun onPageFinished(view: WebView, url: String) {
                super.onPageFinished(view, url)
                view.settings.blockNetworkImage = false
                val currentIndex = view.copyBackForwardList().currentIndex
                val b = index.containsKey(currentIndex)
                if (b) {
                    index[currentIndex].isNotNull {
                        index.put(currentIndex, it.plus(1))
                    }
                } else {
                    index.put(currentIndex, 1)
                }
            }

        }
    }
}
